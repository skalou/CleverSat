CONTRACT_TYPE
{
	name = CleverSatCore
	title = #CleverSat_CleverSatCore_title // Put a new Satellite in orbit of @/targetBody1
	genericTitle = #CleverSat_CleverSatCore_genericTitle // Put a new Satellite in orbit.
	group = CleverSat
	description = #CleverSat_CleverSatCore_desc // Someone is willing to pay us big bucks to launch a satellite into orbit for them. Sure we could be exploring the galaxy, but hey, at least the canteen won't run out of snacks!
	targetBody = @/targetBody1
	synopsis = #CleverSat_CleverSatCore_synopsis // Launch a satellite into the specified orbit.
	completedMessage = #CleverSat_CleverSatCore_completedMessage // Well, that should hold them for a while. Until they ask us to move the thing of course.
	targetBody = @/targetBody1
	//debug line turn this off later
	maxSimultaneous = 3
	//end debug line
	rewardFunds = Random(40000,60000)
	rewardReputation = Random(2.0, 5.0)
	
	DATA
	{
		type = CelestialBody
		targetBody1 = OrbitedBodies().Random()
		title = #CleverSat_CleverSatCore_DATA // Must have reached orbit.
	}
	
	//generate an orbit.
	BEHAVIOUR
	{
		name = OrbitGenerator
		type = OrbitGenerator
		
		RANDOM_ORBIT
		{
			type = RANDOM
			altitudeFactor = @/targetBody1.IsMoon() ? 0.8 : Prestige() == Trivial ? 0.1 : Prestige() == Significant ? 0.3 : 0.5
			inclinationFactor = @/targetBody1 == Sun? 0 : Prestige() == Trivial ? 0.1 : Prestige() == Significant ? 0.3 : 0.5
		}
	}
	
	PARAMETER
	{
	    name = SatOrbit
	    type = VesselParameterGroup
		defineList = SatList
		disableOnStateChange = false

		PARAMETER
		{
	    	name = HasCrewCapacity
	    	type = HasCrewCapacity
			maxCapacity = 0
		}
	
		PARAMETER
		{
		    name = ReachSpecificOrbit
		    type = ReachSpecificOrbit
			index = 0
			//credits to nightingale for this one. Should make prestige match difficulty of contract.
			deviationWindow = Prestige() == Trivial ? 10.0 : Prestige() == Significant ? 7.0 : 5.0
		}
	}
	PARAMETER
	{
	    name = Duration
	    type = Duration
		startCriteria = PARAMETER_COMPLETION
		parameter = SatOrbit
		duration = 10s
		preWaitText = #CleverSat_CleverSatCore_SatOrbit_preWaitText // waiting for correct orbit.
		waitingText = #CleverSat_CleverSatCore_SatOrbit_waitingText // calibrating orbit
		completionText = #CleverSat_CleverSatCore_SatOrbit_completionText // calibration completed
	}

	REQUIREMENT
	{
		name = Any
		type = Any
	    REQUIREMENT
	    {
	    	name = PartModuleUnlocked
	    	type = PartModuleUnlocked
	    	partModule = ModuleDeployableSolarPanel
	    }
	    REQUIREMENT:NEEDS[NearFutureSolar]
	    {
	    	name = PartModuleUnlocked
	    	type = PartModuleUnlocked
	    	partModule = ModuleCurvedSolarPanel
	    }
	    REQUIREMENT:NEEDS[Kopernicus]
	    {
	    	name = PartModuleUnlocked
	    	type = PartModuleUnlocked
	    	partModule = KopernicusSolarPanel
	    }
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
	    name = CelestialBodyCoverage
	    type = CelestialBodyCoverage
		targetBody = @/targetBody1
		minCoverage = 0.5
		maxCoverage = 1.0
	}

	REQUIREMENT
	{
		name = Any
		type = Any
		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked
			part = probeCoreSphere
		}
		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked
			part = probeCoreSphere_v2
		}
	}
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @CleverSat:RNG >4
		title = #CleverSat_CleverSatCore_SatOrbit_Req_Expression // The RNG must like you.
	}
}
