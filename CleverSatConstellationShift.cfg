CONTRACT_TYPE
{
	name = CleverSatConstellationShift
	title = #CleverSat_CleverSatConstellationShift_title // Move a Satellite Constellation
	group = CleverSat
	description = #CleverSat_CleverSatConstellationShift_desc // Slightly embarrassing, but apparently we launched the @/firstTarget constellation into the wrong orbit. So you are going to have to move it.
	genericDescription = #CleverSat_CleverSatConstellationShift_genericDesc // One of our constellations has been deployed to the wrong location. We need to move it.
	targetBody = @/targetBody1
	synopsis = #CleverSat_CleverSatConstellationShift_synopsis // Move the @/firstTarget constellation into the correct orbit
	completedMessage = #CleverSat_CleverSatConstellationShift_completedMessage // Well, that should hold them for a while. Until they ask us to move them again of course.
	targetBody = @/targetBody1
	rewardFunds = Random(10000,20000)
	rewardReputation = Random(1.0, 2.0)
	maxSimultaneous = 1
	
	DATA
	{
		type = List<VesselIdentifier>
		validTarget = $ConstellationList.Add(Target).Where(g => Vessel(g).IsOrbiting() && Vessel(g).Orbit().Inclination() < incThreshold)
		conTargets = $SatList.Add(Target).Where(t => Vessel(t).IsOrbiting() && Vessel(t).Orbit().Apoapsis() > @/targetApMin && Vessel(t).Orbit().Apoapsis() < @/targetApMax && Vessel(t).Orbit().Periapsis() > @/targetPeMin && Vessel(t).Orbit().Periapsis() < @/targetPeMax && Vessel(t).Orbit().Inclination() > @/targetInMin && Vessel(t).Orbit().Inclination() < @/targetInMax && Vessel(t).CelestialBody() == @/targetBody1 && Vessel(t).Orbit().LAN() > @/targetLanMin && Vessel(t).Orbit().LAN() < @/targetLanMax))
		hidden = true
	}
	
	DATA
	{
		type = Vessel
		uniquenessCheck = GROUP_ACTIVE
		firstTarget = @validTarget.SelectUnique()
		title = #CleverSat_CleverSatConstellationShift_DATA // Must have a satellite within pre-defined orbital parameters
	}
	
	//define how close they have to be to be in a Constellation.
	DATA
	{
		type = double
		targetApMin = @firstTarget.Orbit().Apoapsis() - 1000000
		targetApMax = @firstTarget.Orbit().Apoapsis() + 1000000
		targetPeMin = @firstTarget.Orbit().Periapsis() - 1000000
		targetPeMax = @firstTarget.Orbit().Periapsis() + 1000000
		targetInMin = @firstTarget.Orbit().Inclination() - 10
		targetInMax = @firstTarget.Orbit().Inclination() + 10
		targetLanMin = @firstTarget.Orbit().LAN() - 10
		targetLanMax = @firstTarget.Orbit().LAN() + 10
		incThreshold = Prestige() == Trivial ? 20 : Prestige() == Significant ? 90 : 180
		hidden = true
	}
	
	DATA
	{
		type = CelestialBody
		targetBody1 = @/firstTarget.CelestialBody()
		hidden = true
	}
	
	BEHAVIOUR
	{
    	name = OrbitGenerator
    	type = OrbitGenerator

		RANDOM_ORBIT
		{
			type = RANDOM
			altitudeFactor = @/targetBody1.IsMoon() ? 0.8 : Prestige() == Trivial ? 0.1 : Prestige() == Significant ? 0.3 : 0.5
			inclinationFactor = @/targetBody1 == Sun ? 0 : Prestige() == Trivial ? 0.1 : Prestige() == Significant ? 0.5 : 0.8
		}
	}
	PARAMETER
	{
		type = VesselParameterGroup

		ITERATOR
		{
			type = VesselIdentifier
			vessel = @/conTargets
		}

		PARAMETER
		{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit
			index = 0
			deviationWindow = Prestige() == Trivial ? 10.0 : Prestige() == Significant ? 7.0 : 5.0
		}
	}

	REQUIREMENT
	{
		name = SatCount
		type = Expression
		expression = @/conTargets.Count()>2
		title = #CleverSat_CleverSatConstellationShift_Req // Target must be in a constellation.
	}
	REQUIREMENT
	{
		name = Expression
		type = Expression
		checkOnActiveContract = false
		expression = @CleverSat:RNG <3
		title = #CleverSat_CleverSatConstellationShift_Req_Expression // The RNG must like you.
	}
}
